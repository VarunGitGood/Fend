---
- name: Add the nf_conntrack module
  become: true
  community.general.modprobe:
    name: nf_conntrack
    state: present
  tags:
    - conntrack
    - sysctl

- name: Stat nf_conntrack_tcp_be_liberal
  become: true
  ansible.builtin.stat:
    path: /proc/sys/net/netfilter/nf_conntrack_tcp_be_liberal
  register: conntrackliberal
  tags:
    - conntrack
    - sysctl

# https://github.com/ansible/ansible/issues/45446
- name: Enable nf_conntrack_tcp_be_liberal to keep connections alive
  become: true
  ansible.posix.sysctl:
    name: net.netfilter.nf_conntrack_tcp_be_liberal
    value: "1"
    state: present
    sysctl_set: true
    sysctl_file: "{{ sysctl_conf_dir }}/zz-ufw-hardening.conf"
    reload: true
  when: conntrackliberal.stat.exists
  tags:
    - conntrack
    - sysctl

- name: Install UFW
  become: true
  ansible.builtin.apt:
    name: ufw
    state: present
    install_recommends: false
  tags:
    - ufw

- name: Set UFW IPT_SYSCTL
  become: true
  ansible.builtin.lineinfile:
    regexp: ^IPT_SYSCTL=
    line: IPT_SYSCTL={{ sysctl_conf_dir }}/zz-ufw-hardening.conf
    dest: /etc/default/ufw
    mode: "0640"
    state: present
    create: false
    backrefs: true
  tags:
    - ufw

- name: Allow sshd port from administrator networks
  become: true
  community.general.ufw:
    rule: limit
    from_ip: "{{ item.0 }}"
    to_port: "{{ item.1 | int }}"
    proto: tcp
    comment: ansible managed
  loop: "{{ sshd_admin_net | product(sshd_ports) | list }}"
  tags:
    - ufw

- name: Enable UFW and set default deny incoming
  become: true
  community.general.ufw:
    state: enabled
    direction: incoming
    default: deny
    log: true
    logging: low
    comment: ansible managed
  tags:
    - ufw

- name: Enable UFW and set default deny outgoing
  become: true
  community.general.ufw:
    state: enabled
    direction: outgoing
    default: deny
    log: true
    logging: low
    comment: ansible managed
  tags:
    - ufw

- name: Stat UFW rules
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    ufw show added | grep '^ufw' | grep -v "'ansible\smanaged'" | sed 's/ufw //g'
  args:
    executable: /bin/bash
  failed_when: ufw_not_managed.rc > 1
  changed_when: false
  register: ufw_not_managed
  tags:
    - ufw


- name: Allow outgoing specified ports
  become: true
  community.general.ufw:
    rule: allow
    to_port: "{{ item | int }}"
    direction: out
    comment: ansible managed
  loop: "{{ ufw_outgoing_traffic }}"
  tags:
    - ufw

- name: Deny IPv4 loopback network traffic
  become: true
  community.general.ufw:
    rule: deny
    from_ip: 127.0.0.0/8
    comment: ansible managed
  tags:
    - ufw

- name: Deny IPv6 loopback network traffic
  become: true
  when: not disable_ipv6
  community.general.ufw:
    rule: deny
    from_ip: ::1
    comment: ansible managed
  tags:
    - ufw

- name: Allow loopback traffic in
  become: true
  community.general.ufw:
    rule: allow
    interface: lo
    direction: in
    comment: ansible managed
  tags:
    - ufw

- name: Allow loopback traffic out
  become: true
  community.general.ufw:
    rule: allow
    interface: lo
    direction: out
    comment: ansible managed
  tags:
    - ufw

- name: Delete unmanaged UFW rules
  become: true
  ansible.builtin.command:
    cmd: ufw delete {{ item }}
  register: ufw_delete
  changed_when: ufw_delete.rc != 0
  failed_when: ufw_delete.rc != 0
  when: ufw_not_managed.stdout_lines | length > 0 and not ansible_os_family == "RedHat"
  loop: "{{ ufw_not_managed.stdout_lines }}"
  tags:
    - ufw

- name: Configure conntrack sysctl
  become: true
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value | int }}"
    state: present
    sysctl_set: true
    sysctl_file: "{{ sysctl_conf_dir }}/zz-ufw-hardening.conf"
  with_dict: "{{ conntrack_sysctl_settings }}"
  notify:
    - Restart sysctl
  tags:
    - conntrack
    - sysctl

